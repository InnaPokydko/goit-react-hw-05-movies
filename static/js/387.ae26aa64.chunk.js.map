{"version":3,"file":"static/js/387.ae26aa64.chunk.js","mappings":"qNAEaA,EAAaC,EAAAA,EAAAA,IAAH,oHAgBVC,GARaD,EAAAA,EAAAA,GAAH,8PAQHA,EAAAA,EAAAA,EAAH,yJAUJE,EAAKF,EAAAA,EAAAA,GAAH,2DAKFG,EAAeH,EAAAA,EAAAA,GAAH,8I,SCCzB,EA9BgB,SAAC,GAA0B,IAAxBI,EAAuB,EAAvBA,QAAuB,EAAdC,QAC1B,OACE,SAACN,EAAD,UACGK,IAAYA,EAAQE,OAAS,EAC5BF,EAAQG,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,4BAEI,UAACR,EAAD,sBAAaO,MACb,SAACR,EAAD,UAAOS,MAHDF,EADA,KASZ,SAACL,EAAD,qCAIP,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ReviewsBox = styled.div`\nwidth: 900px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n  padding: 20px;\n`;\n\nexport const ReviewItem = styled.li`\n  border-radius: 4px;\n  background-color: #221c21;\n  padding: 20px;\n  box-shadow: 0px 1px 2px rgb(255 158 0 / 40%), 0px 2px 4px rgb(255 0 245 / 30%),\n    0px 4px 8px rgb(255 221 0 / 40%), 0px 4px 16px rgb(255 247 254 / 10%);\n`;\n\nexport const Text = styled.p`\nfont-family: 'Roboto';\ncolor: #fff;\n    font-size: 14px;\n  line-height: 24px;\n  font-style: normal;\n  font-weight: 100;\n\n`;\n\nexport const H3 = styled.h3`\ncolor: #ED8F03;\nfont-size: 18px;\n`;\n\nexport const NotFoundText = styled.h3`\nfont-family: 'Roboto';\ncolor: #fff;\nfont-size: 24px;\nline-height: 24px;\nfont-style: normal;\nfont-weight: 400;\n\n`;","import PropTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\nimport { ReviewsBox, Text, NotFoundText, H3} from './Reviews.styled';\n\nconst Reviews = ({ reviews, movieId }) => {\n  return (\n    <ReviewsBox>\n      {reviews && (reviews.length > 0 ? (\n        reviews.map(({ id, author, content }) => (\n          <div key={id}>\n           \n              <H3>Author: {author}</H3>\n              <Text>{content}</Text>\n            \n          </div>\n        ))\n      ) : (\n        <NotFoundText>No reviews available</NotFoundText>\n      ))}\n    </ReviewsBox>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n      updated_at: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default Reviews;\n\n// import { useEffect, useState } from 'react';\n// import axios from 'axios';\n// import { Link } from 'react-router-dom';\n\n// const Reviews = ({ movieId }) => {\n//   const [reviews, setReviews] = useState([]);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(false);\n\n//   useEffect(() => {\n//     const fetchReviews = async () => {\n//       try {\n//         setIsLoading(true);\n//         const response = await axios.get(`https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=7c36d10ef8eae7f493da1fadc9c612a4&language=en-US&page=1`);\n//         setReviews(response.data.results);\n//         setIsLoading(false);\n//       } catch (error) {\n//         setError(true);\n//         setIsLoading(false);\n//         console.log(error);\n//       }\n//     };\n\n//     fetchReviews();\n//   }, [movieId]);\n\n//   return (\n//     <div>\n//       {isLoading && <p>Loading...</p>}\n//       {error && <p>Something went wrong.</p>}\n//       {reviews && reviews.length > 0 ? (\n//         reviews.map(({ id, content, updated_at }) => (\n//           <div key={id}>\n//             <Link to={`/movies/${movieId}/reviews/${id}`}>\n//               <p>{updated_at}</p>\n//               <p>{content}</p>\n//             </Link>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No reviews available.</p>\n//         )}\n//     </div>\n//   );\n// };\n\n// export default Reviews;\n\n// import { Link } from 'react-router-dom';\n\n// const Reviews = () => {\n//   const [reviews, setReviews] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n//   const [error, setError] = useState(false);\n\n//   const { movieId } = useParams();\n\n//   useEffect(() => {\n//     const fetchReviews = async () => {\n//       try {\n//         setIsLoading(true);\n//         const response = await axios.get(\n//           `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n//         );\n//         setReviews(response.data.results);\n//         setIsLoading(false);\n//       } catch (error) {\n//         setError(true);\n//         setIsLoading(false);\n//         console.log(error);\n//       }\n//     };\n//     fetchReviews();\n//   }, [movieId]);\n\n//   return (\n//     <div>\n//       <h2>Reviews:</h2>\n//       {isLoading && <p>Loading...</p>}\n//       {error && <p>Something went wrong.</p>}\n//       {reviews && reviews.length > 0 ? (\n//         reviews.map(({ id, content, updated_at }) => (\n//           <div key={id}>\n//             <p>{updated_at}</p>\n//             <p>{content}</p>\n//           </div>\n//         ))\n//       ) : (\n//         <p>No reviews available.</p>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default Reviews;\n"],"names":["ReviewsBox","styled","Text","H3","NotFoundText","reviews","movieId","length","map","id","author","content"],"sourceRoot":""}